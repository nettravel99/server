// ???? Todo  ???? need to set headers for security.
  // TODO? - email should be transformed to lower case and kept in lower case.
  3. Email should be an index
  4. POSTGRESQL is there an automatic way to have the timestamp for changes tracked and maybe even every change.
  5. When you look  up the user in the db we can check for null otherwise check for validity of password and return jsonwebtoken
        CHECK USERQUERIES for below line
        This can be checked on the same line with if  (User && isValidPassword()) ....
        if null then res.status(400).json{error, {global......}}
  6. bcrypt can be used instead of crypto
  7. Does crypto have a password compare method?
  8. When at login there is an SQL error like we  use many instead of one LOGINFOrm fails.
  9. Check errors when server is not available
  10. database email address must be unique.
  11. Storage is not being setting during login


///////////////////////////////
pswdFuncs.validate = (salt, password, reqPswd, email) => {
  console.log("Salt in validate: ", salt);
  console.log("Password Entered: ", reqPswd);
  var passwordData = sha512(reqPswd, salt);
  console.log("Password in validate: ", passwordData.passwordHash);
  console.log("Password from database:", password);
  if (passwordData.passwordHash === password) {
    console.log("This was a match");
    return { email: email, jwt: generateJWT(email) };
  } else {
    console.log("No Match");
    return null;
  }
};


////////////////////////

db.one("select * from users where email=$1", email)
  .then(function(data) {
    console.log("Password is: ", pswdMethods.getPassword(reqPswd, data.salt));
    // data.salt and data.password are the values in the datatbase. reqPswd is from the user logging in.
    // result = pswdMethods.validate(
    //   data.salt,
    //   data.password,
    //   reqPswd,
    //   data.email
    // );
    // console.log("result", result);
    var result = true;
    if (result) {
      res.status(200).json({
        status: "success",
        data: data,
        message: "Retrieved User Data"
      });
      /* jshint ignore:end */
    } else {
      res.status(400).json({
        errors: {
          global: "Invalid Credentials - 3"
        }
      });
    }
  })
  .catch(function(err) {
    console.log("Error in SQL call");
    return next(err);

    // res .status(400) .json({status: "fail", data: err, message: "Error retrieving
    // data"});
  });
}
